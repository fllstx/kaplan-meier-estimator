{"version":3,"file":"kaplan-meier-estimator.iife.js","sources":["../src/helpers.ts","../src/index.ts"],"sourcesContent":["/**\n * Sort a collection by a given key.\n *\n * @export\n * @template T\n * @param {T[]} collection\n * @param {keyof T} key\n * @returns {T[]} sorted collection\n */\nexport function sortBy<T>(collection: T[], key: keyof T): T[] {\n\treturn collection.sort((a, b) => (a[key] as never) - (b[key] as never));\n}\n\n/**\n * Splits a collection into sets, grouped by the result of running each value through iteratee.\n * If iteratee is a string instead of a function, groups by the property named by iteratee on each of the values.\n *\n * @copyright CC BY-SA 4.0 by kevinrodriguez-io\n * @see https://stackoverflow.com/a/62765924/722162\n *\n * @export\n * @template T\n * @template K\n * @param {T[]} collection\n * @param {(item: T) => K} getKey function that returns the key to group by\n * @returns {{ [K: number]: T[] }}\n */\nexport function groupBy<T, K extends number>(\n\tcollection: T[],\n\tgetKey: (item: T) => K\n): { [K: number]: T[] } {\n\treturn collection.reduce((previous, currentItem) => {\n\t\tconst group = getKey(currentItem);\n\t\tif (!previous[group]) previous[group] = [];\n\t\tprevious[group].push(currentItem);\n\t\treturn previous;\n\t}, {} as Record<K, T[]>);\n}\n\n/**\n * Return a list of unique values.\n *\n * @export\n * @template T\n * @param {T[]} list\n * @returns {T[]}\n */\nexport function uniq<T>(list: T[]): T[] {\n\treturn Array.from(new Set(list));\n}\n","import { groupBy, sortBy, uniq } from './helpers';\n\ninterface kaplanMeierEsimatorData {\n\ttte: number;\n\tev: boolean;\n}\n\nexport interface kaplanMeierEsimatorResult {\n\trate: number;\n\ttime: number;\n}\n\nexport interface KaplanMeierResultData {\n\td?: number;\n\te?: boolean;\n\tn?: number;\n\trate?: number | null;\n\ts: number;\n\tt: number;\n}\n\ninterface TimeTableData {\n\tn: number;\n\te: number;\n\td?: number;\n\tt?: number;\n}\n\n/**\n * Compute at-risk, exiting, and deaths for each time t[i], from a list of events.\n *\n * @param {number[]} tte time to exit (event or censor).\n * @param {boolean[]} ev is truthy if there is an event.\n * @returns {TimeTableData[]}\n */\nfunction timeTable(tte: number[], ev: boolean[]): TimeTableData[] {\n\t// sort and collate\n\tconst exits: kaplanMeierEsimatorData[] = sortBy(\n\t\ttte.map((x, i) => ({ tte: x, ev: ev[i] })),\n\t\t'tte'\n\t);\n\n\t// unique tte\n\tconst uniqTtes = uniq<number>(tte);\n\n\t// group by common time of exit\n\tconst groupedTtes = groupBy<kaplanMeierEsimatorData, number>(\n\t\texits,\n\t\t(x: kaplanMeierEsimatorData) => x.tte\n\t);\n\n\tconst firstEntry = { n: exits.length, e: 0 };\n\n\t// compute d_i, n_i for times t_i (including censor times)\n\tconst result = uniqTtes.reduce((a: TimeTableData[], tte: number) => {\n\t\tconst group = groupedTtes[tte];\n\t\tconst l: TimeTableData = a.length ? a[a.length - 1] : firstEntry;\n\t\tconst events = group.filter((x: kaplanMeierEsimatorData) => x.ev);\n\n\t\tconst n = l.n - l.e;\n\n\t\ta.push({\n\t\t\tn, // at risk\n\t\t\te: group.length, // number exiting\n\t\t\td: events.length, // number events (death)\n\t\t\tt: group[0].tte // time\n\t\t});\n\t\treturn a;\n\t}, []);\n\n\treturn result;\n}\n\n/**\n * See http://en.wikipedia.org/wiki/Kaplan%E2%80%93Meier_estimator\n *\n * tte  time to exit (event or censor)\n *  ev   is truthy if there is an event.\n */\nexport function kaplanMeierEsimator(\n\tevents: number[],\n\tcensors: boolean[]\n): kaplanMeierEsimatorResult[] {\n\tif (events.length !== censors.length)\n\t\tthrow new Error('[kaplan-meier-esimator]: events and censors must be of same length');\n\n\tconst dini: TimeTableData[] = timeTable(events, censors);\n\n\tconst firstEntry: KaplanMeierResultData = {\n\t\ts: 1,\n\t\tt: 0\n\t};\n\n\t// s : the survival rate from t=0 to the particular time (i.e. the\n\t//     end of the time interval)\n\t// rate : the chance of an event happened within the time interval (as in t\n\t//     and the previous t with an event)\n\tconst result: KaplanMeierResultData[] = dini.reduce(\n\t\t(a: KaplanMeierResultData[], dn: TimeTableData) => {\n\t\t\t// survival at each t_i (including censor times)\n\t\t\tconst l: KaplanMeierResultData = a.length ? a[a.length - 1] : firstEntry;\n\n\t\t\tif (dn.d) {\n\t\t\t\t// there were events at this t_i\n\t\t\t\ta.push({\n\t\t\t\t\tt: dn.t || 0,\n\t\t\t\t\te: true,\n\t\t\t\t\ts: l.s * (1 - dn.d / dn.n),\n\t\t\t\t\tn: dn.n,\n\t\t\t\t\td: dn.d,\n\t\t\t\t\trate: dn.d / dn.n\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// only censors\n\t\t\t\ta.push({\n\t\t\t\t\tt: dn.t || 0,\n\t\t\t\t\te: false,\n\t\t\t\t\ts: l.s,\n\t\t\t\t\tn: dn.n,\n\t\t\t\t\td: dn.d,\n\t\t\t\t\trate: null\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn a;\n\t\t},\n\t\t[]\n\t);\n\n\treturn result.map(r => ({\n\t\trate: r.s,\n\t\ttime: r.t\n\t}));\n}\n"],"names":[],"mappings":"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"}